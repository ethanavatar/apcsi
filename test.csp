// globally defined value
global<- 1
{
    // OK, `global` exists in the parent scope
    DISPLAY "Scope 1 contains name: global=" + global + " (expect: 1)"

    // Increment a value in the parent scope
    global <- global + 1

    // Define a local scope value
    local <- 3
    {
        DISPLAY "Scope 2 contains name: local=" + local + " (expect: 3)"
        DISPLAY "Scope 2 also contains name: global=" + global + " (expect: 2), it was defined 2 scopes ago and incremented in scope 1"
    }
}

// prints "2"
DISPLAY "The global scope contains name: global=" + global + " (expect: 2), properly keeping its change from a nested scope"

// `local` was dropped at the end of the block
// Crash!
//DISPLAY local

IF (TRUE)
{
    DISPLAY "Lone IF"
}

IF (1 = 2) {
    DISPLAY "then branch 2: this is not supposed to happen"
} ELSE {
    DISPLAY "else branch 2: this is supposed to happen"
}

IF (1 = 2) {
    DISPLAY "then branch 2: this is not supposed to happen"
}


// Intentionally long seperation between then and else branches
// to test that the parser can handle (still) it


ELSE {
    DISPLAY "else branch 2: this is supposed to happen"
}

IF (1 = 1) {
    DISPLAY "then branch 1: this is supposed to happen"
}
// This comment was previously a bug
ELSE {
    DISPLAY "else branch 1: this is not supposed to happen"
}

IF (1 = 2) {
    DISPLAY "then branch 2: this is not supposed to happen"
} // This comment was previously a bug
ELSE {
    DISPLAY "else branch 2: this is supposed to happen"
}

i <- 1
REPEAT UNTIL (i > 5) {
    DISPLAY "i is " + (5 - i) + " less than 5"

    IF (5 - i = 0) {
        DISPLAY "breaking"
    }

    i <- i + 1
}

i <- 1
REPEAT (5) TIMES {
    DISPLAY "looped " + i + " times"
    i <- i + 1
}

PROCEDURE Hello(name) {
    DISPLAY "Hello, " + name + "!"
}

PROCEDURE nHellos(n) {
    DISPLAY "passed n=" + n
    i <- 1
    REPEAT (n) TIMES {
        Hello("Sailor " + i)
        i <- i + 1
    }
}

DISPLAY nHellos
nHellos(5)

PROCEDURE Increment(x) {
    RETURN x + 1
}

ret <- Increment(1)
DISPLAY "Increment(1) returned " + ret + " (expect: 2)"

lst <- [1, 2, 3]
DISPLAY lst

DISPLAY "Append 4"
APPEND lst, 4
DISPLAY lst

DISPLAY "INSERT 0 at index 1"
INSERT lst, 1, 0
DISPLAY lst

DISPLAY "REMOVE 0 from index 1"
REMOVE lst, 1
DISPLAY lst

DISPLAY "Fourth element is " + lst[4] + " (expect: 4)"

DISPLAY "Append 0 and change it in-place to 5"
APPEND lst, 0
lst[5] <- 5
DISPLAY lst

// unlke the other list keywords, LENGTH is a unary operator and not a statement
l <- LENGTH lst
DISPLAY "Length of lst is " + l + " (expect: 5)"

DISPLAY "BONUS: LENGTH also works on strings"
DISPLAY "Length of 'Hello, Sailor!' is " + LENGTH "Hello, Sailor!" + " (expect: 14)"

DISPLAY "FOR loop"
FOR EACH n IN lst {
    n <- n + 1
    DISPLAY "n=" + n
}

DISPLAY "all elements in lst are now incremented by 1"
DISPLAY lst

ch <- "abc"
DISPLAY "The third character in 'abc' is " + ch[3] + " (expect: c)"
